{"version":3,"sources":["components/Search/index.jsx","components/Weather/index.jsx","App.js","serviceWorker.js","index.js"],"names":["getSuggestionValue","suggestion","renderSuggestion","to","Search","useState","value","changeValue","suggestions","changeSuggestions","history","useHistory","inputProps","placeholder","onChange","_","newValue","autoFocus","getCities","inputValue","url","Axios","get","then","response","cities","data","predictions","map","city","description","catch","className","style","textAlign","onSuggestionsFetchRequested","onSuggestionsClearRequested","onSuggestionSelected","method","push","alwaysRenderSuggestions","highlightFirstSuggestion","Weather","weatherData","changeWeatherData","errorMsg","changeErrorMsg","useParams","useEffect","temperature","main","temp","name","country","sys","humidity","weather","feelsLike","feels_like","error","message","capErrorMsg","charAt","toUpperCase","slice","icon","library","add","faTemperatureHigh","faCity","faGlobe","faWater","faCloudSunRain","faSmile","faFrown","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8ce24ee9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport Autosuggest from \"react-autosuggest\";\nimport Axios from \"axios\";\nimport \"./Search.scss\";\n\nconst getSuggestionValue = suggestion => suggestion;\n\nconst renderSuggestion = suggestion => {\n  return (\n    <Link to={`/cities/${suggestion}`}>\n      <div>{suggestion}</div>\n    </Link>\n  );\n};\n\nconst Search = () => {\n  const [value, changeValue] = useState(\"\");\n  const [suggestions, changeSuggestions] = useState([]);\n  const history = useHistory();\n\n  const onChange = (_, { newValue }) => {\n    changeValue(newValue);\n  };\n\n  const onSuggestionsFetchRequested = ({ value }) => {\n    getCities(value);\n  };\n\n  const onSuggestionsClearRequested = () => {\n    changeSuggestions([]);\n  };\n\n  const onSuggestionSelected = (_, { suggestion, method }) => {\n    if (method === \"enter\") {\n      history.push(`/cities/${suggestion}`);\n    }\n  };\n\n  const inputProps = {\n    placeholder: \"City...\",\n    value,\n    onChange: onChange,\n    autoFocus: true\n  };\n\n  const apiKey = \"AIzaSyCVfiQ54AOkAtg73o3QXz8etvQCzCAFquw\";\n\n  const getCities = inputValue => {\n    const url = `https://maps.googleapis.com/maps/api/place/autocomplete/json?input=${inputValue}&types=(cities)&key=${apiKey}`;\n    Axios.get(url)\n      .then(response => {\n        const cities = response.data.predictions.map(city => city.description);\n        changeSuggestions(cities);\n      })\n      .catch(() => changeSuggestions([]));\n  };\n\n  return (\n    <div className=\"search-container\">\n      <h1>Weather app</h1>\n      <h3 style={{ textAlign: \"center\" }}>\n        Helps you find weather conditions in chosen City\n      </h3>\n\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={onSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        inputProps={inputProps}\n        onSuggestionSelected={onSuggestionSelected}\n        alwaysRenderSuggestions={true}\n        highlightFirstSuggestion={true}\n      />\n    </div>\n  );\n};\n\nexport default Search;\n","import React, { useState, useEffect } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Axios from \"axios\";\nimport \"./Weather.scss\";\n\nconst apiKey = \"aa1142eac2cd6d762d231d2777fe6959\";\n\nconst Weather = () => {\n  const [weatherData, changeWeatherData] = useState({});\n  const [errorMsg, changeErrorMsg] = useState(\"\");\n  const { city } = useParams();\n\n  const getWeather = () => {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`;\n\n    Axios.get(url)\n      .then(({ data }) => {\n        changeWeatherData({\n          temperature: data.main.temp,\n          city: data.name,\n          country: data.sys.country,\n          humidity: data.main.humidity,\n          description: data.weather[0].description,\n          feelsLike: data.main.feels_like\n        });\n      })\n      .catch(error => {\n        const errorMsg = error.response.data.message;\n        const capErrorMsg =\n          errorMsg.charAt(0).toUpperCase() + errorMsg.slice(1);\n        changeErrorMsg(capErrorMsg);\n      });\n  };\n\n  useEffect(getWeather, [city]);\n\n  const {\n    temperature,\n    country,\n    humidity,\n    description,\n    feelsLike\n  } = weatherData;\n\n  return (\n    <div className=\"result\">\n      {!errorMsg ? (\n        <ul className=\"result-list\">\n          <div className=\"result-item\">\n            <FontAwesomeIcon icon=\"temperature-high\" />\n            <li>\n              Temperature:\n              <span className=\"result-value\">{temperature} &#x2103;</span>\n            </li>\n          </div>\n          <div className=\"result-item\">\n            <FontAwesomeIcon icon=\"city\" />\n            <li>\n              City:<span className=\"result-value\">{city}</span>\n            </li>\n          </div>\n          <div className=\"result-item\">\n            <FontAwesomeIcon icon=\"globe\" />\n            <li>\n              Country:<span className=\"result-value\">{country}</span>\n            </li>\n          </div>\n          <div className=\"result-item\">\n            <FontAwesomeIcon icon=\"water\" />\n            <li>\n              Humidity:<span className=\"result-value\">{humidity}</span>\n            </li>\n          </div>\n          <div className=\"result-item\">\n            <FontAwesomeIcon icon=\"cloud-sun-rain\" />\n            <li>\n              Description:<span className=\"result-value\">{description}</span>\n            </li>\n          </div>\n          <div className=\"result-item\">\n            {feelsLike >= 5 ? (\n              <FontAwesomeIcon icon=\"smile\" />\n            ) : (\n              <FontAwesomeIcon icon=\"frown\" />\n            )}\n            <li>\n              Feels-like:<span className=\"result-value\">{feelsLike}</span>\n            </li>\n          </div>\n        </ul>\n      ) : (\n        <p className=\"error-msg\">{errorMsg}</p>\n      )}\n\n      <Link to=\"/\" className=\"back\">\n        <button className=\"back-button\">Back to Home Page</button>\n      </Link>\n    </div>\n  );\n};\n\nexport default Weather;\n","import React from \"react\";\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n  faTemperatureHigh,\n  faCity,\n  faGlobe,\n  faWater,\n  faCloudSunRain,\n  faSmile,\n  faFrown\n} from \"@fortawesome/free-solid-svg-icons\";\nimport Search from \"./components/Search\";\nimport Weather from \"./components/Weather\";\n\nlibrary.add(\n  faTemperatureHigh,\n  faCity,\n  faGlobe,\n  faWater,\n  faCloudSunRain,\n  faSmile,\n  faFrown\n);\n\nconst App = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact component={Search} />\n        <Route path=\"/cities/:city\" component={Weather} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}